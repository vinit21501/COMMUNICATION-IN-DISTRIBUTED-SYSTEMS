# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import market_pb2 as market__pb2


class SellerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterSeller = channel.unary_unary(
                '/market.Seller/RegisterSeller',
                request_serializer=market__pb2.SellerRegisterRequest.SerializeToString,
                response_deserializer=market__pb2.SuccessReply.FromString,
                )
        self.SellItem = channel.unary_unary(
                '/market.Seller/SellItem',
                request_serializer=market__pb2.SellerItemsRequest.SerializeToString,
                response_deserializer=market__pb2.SuccessReply.FromString,
                )
        self.UpdateItem = channel.unary_unary(
                '/market.Seller/UpdateItem',
                request_serializer=market__pb2.UpdateItemsDetailsRequest.SerializeToString,
                response_deserializer=market__pb2.SuccessReply.FromString,
                )
        self.DeleteItem = channel.unary_unary(
                '/market.Seller/DeleteItem',
                request_serializer=market__pb2.DeleteItemRequest.SerializeToString,
                response_deserializer=market__pb2.SuccessReply.FromString,
                )
        self.DisplaySellerItems = channel.unary_stream(
                '/market.Seller/DisplaySellerItems',
                request_serializer=market__pb2.SellerRegisterRequest.SerializeToString,
                response_deserializer=market__pb2.ItemDetailsReply.FromString,
                )
        self.NotifyClient = channel.unary_stream(
                '/market.Seller/NotifyClient',
                request_serializer=market__pb2.SellerRegisterRequest.SerializeToString,
                response_deserializer=market__pb2.ItemDetailsReply.FromString,
                )


class SellerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterSeller(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SellItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisplaySellerItems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SellerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterSeller': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterSeller,
                    request_deserializer=market__pb2.SellerRegisterRequest.FromString,
                    response_serializer=market__pb2.SuccessReply.SerializeToString,
            ),
            'SellItem': grpc.unary_unary_rpc_method_handler(
                    servicer.SellItem,
                    request_deserializer=market__pb2.SellerItemsRequest.FromString,
                    response_serializer=market__pb2.SuccessReply.SerializeToString,
            ),
            'UpdateItem': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateItem,
                    request_deserializer=market__pb2.UpdateItemsDetailsRequest.FromString,
                    response_serializer=market__pb2.SuccessReply.SerializeToString,
            ),
            'DeleteItem': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteItem,
                    request_deserializer=market__pb2.DeleteItemRequest.FromString,
                    response_serializer=market__pb2.SuccessReply.SerializeToString,
            ),
            'DisplaySellerItems': grpc.unary_stream_rpc_method_handler(
                    servicer.DisplaySellerItems,
                    request_deserializer=market__pb2.SellerRegisterRequest.FromString,
                    response_serializer=market__pb2.ItemDetailsReply.SerializeToString,
            ),
            'NotifyClient': grpc.unary_stream_rpc_method_handler(
                    servicer.NotifyClient,
                    request_deserializer=market__pb2.SellerRegisterRequest.FromString,
                    response_serializer=market__pb2.ItemDetailsReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'market.Seller', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Seller(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterSeller(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/market.Seller/RegisterSeller',
            market__pb2.SellerRegisterRequest.SerializeToString,
            market__pb2.SuccessReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SellItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/market.Seller/SellItem',
            market__pb2.SellerItemsRequest.SerializeToString,
            market__pb2.SuccessReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/market.Seller/UpdateItem',
            market__pb2.UpdateItemsDetailsRequest.SerializeToString,
            market__pb2.SuccessReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/market.Seller/DeleteItem',
            market__pb2.DeleteItemRequest.SerializeToString,
            market__pb2.SuccessReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisplaySellerItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/market.Seller/DisplaySellerItems',
            market__pb2.SellerRegisterRequest.SerializeToString,
            market__pb2.ItemDetailsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/market.Seller/NotifyClient',
            market__pb2.SellerRegisterRequest.SerializeToString,
            market__pb2.ItemDetailsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BuyerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SearchItem = channel.unary_stream(
                '/market.Buyer/SearchItem',
                request_serializer=market__pb2.ItemSearchRequest.SerializeToString,
                response_deserializer=market__pb2.ItemDetailsReply.FromString,
                )
        self.BuyItem = channel.unary_unary(
                '/market.Buyer/BuyItem',
                request_serializer=market__pb2.BuyingRequest.SerializeToString,
                response_deserializer=market__pb2.SuccessReply.FromString,
                )
        self.AddToWishList = channel.unary_unary(
                '/market.Buyer/AddToWishList',
                request_serializer=market__pb2.WishListRequest.SerializeToString,
                response_deserializer=market__pb2.SuccessReply.FromString,
                )
        self.RateItem = channel.unary_unary(
                '/market.Buyer/RateItem',
                request_serializer=market__pb2.RatingRequest.SerializeToString,
                response_deserializer=market__pb2.SuccessReply.FromString,
                )
        self.NotifyClient = channel.unary_stream(
                '/market.Buyer/NotifyClient',
                request_serializer=market__pb2.BuyerNotificationRequest.SerializeToString,
                response_deserializer=market__pb2.ItemDetailsReply.FromString,
                )


class BuyerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SearchItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BuyItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddToWishList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RateItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BuyerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SearchItem': grpc.unary_stream_rpc_method_handler(
                    servicer.SearchItem,
                    request_deserializer=market__pb2.ItemSearchRequest.FromString,
                    response_serializer=market__pb2.ItemDetailsReply.SerializeToString,
            ),
            'BuyItem': grpc.unary_unary_rpc_method_handler(
                    servicer.BuyItem,
                    request_deserializer=market__pb2.BuyingRequest.FromString,
                    response_serializer=market__pb2.SuccessReply.SerializeToString,
            ),
            'AddToWishList': grpc.unary_unary_rpc_method_handler(
                    servicer.AddToWishList,
                    request_deserializer=market__pb2.WishListRequest.FromString,
                    response_serializer=market__pb2.SuccessReply.SerializeToString,
            ),
            'RateItem': grpc.unary_unary_rpc_method_handler(
                    servicer.RateItem,
                    request_deserializer=market__pb2.RatingRequest.FromString,
                    response_serializer=market__pb2.SuccessReply.SerializeToString,
            ),
            'NotifyClient': grpc.unary_stream_rpc_method_handler(
                    servicer.NotifyClient,
                    request_deserializer=market__pb2.BuyerNotificationRequest.FromString,
                    response_serializer=market__pb2.ItemDetailsReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'market.Buyer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Buyer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SearchItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/market.Buyer/SearchItem',
            market__pb2.ItemSearchRequest.SerializeToString,
            market__pb2.ItemDetailsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BuyItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/market.Buyer/BuyItem',
            market__pb2.BuyingRequest.SerializeToString,
            market__pb2.SuccessReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddToWishList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/market.Buyer/AddToWishList',
            market__pb2.WishListRequest.SerializeToString,
            market__pb2.SuccessReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RateItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/market.Buyer/RateItem',
            market__pb2.RatingRequest.SerializeToString,
            market__pb2.SuccessReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/market.Buyer/NotifyClient',
            market__pb2.BuyerNotificationRequest.SerializeToString,
            market__pb2.ItemDetailsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class NotificationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Notify = channel.unary_unary(
                '/market.Notification/Notify',
                request_serializer=market__pb2.ItemDetailsReply.SerializeToString,
                response_deserializer=market__pb2.SuccessReply.FromString,
                )


class NotificationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Notify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NotificationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Notify': grpc.unary_unary_rpc_method_handler(
                    servicer.Notify,
                    request_deserializer=market__pb2.ItemDetailsReply.FromString,
                    response_serializer=market__pb2.SuccessReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'market.Notification', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Notification(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Notify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/market.Notification/Notify',
            market__pb2.ItemDetailsReply.SerializeToString,
            market__pb2.SuccessReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
